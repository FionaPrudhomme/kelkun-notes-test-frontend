'use client'

import {ExternalLink, Lightbulb} from 'lucide-react'
import Link from 'next/link'

import {Alert, AlertDescription, AlertTitle} from '@/components/ui/alert'
import {Separator} from '@/components/ui/separator'

export default function ProjectPage() {
    return (
        <div className="max-w-4xl">
            <h2 className="text-2xl font-semibold text-white mb-4">üß© Gestion des t√¢ches du projet</h2>
            <p className="text-gray-300 mb-3">
                Si tu es ici, c‚Äôest que tu as r√©ussi √† cr√©er ton premier projet üéâ
                L‚Äôobjectif maintenant est de mettre en place le <strong>module complet de gestion des t√¢ches</strong>,
                c√¥t√© backend et frontend.
            </p>
            <Alert className="text-gray-300 mb-6 rounded-sm">
                <AlertDescription>
                    üëâ Remplace le contenu de cette page par ta propre impl√©mentation pour r√©pondre √† l‚Äôexercice.
                </AlertDescription>
            </Alert>

            <Separator className="my-8 bg-gray-800"/>

            {/* BACKEND */}
            <h3 className="text-xl font-semibold text-white mb-4">‚öôÔ∏è Backend (NestJS + GraphQL)</h3>
            <ul className="list-disc list-inside text-gray-300 space-y-2 mb-8">
                <li>Cr√©er une <code>Task</code> entity li√©e √† <code>Project</code> (relation OneToMany).</li>
                <li>Cr√©er les <strong>DTO</strong>, <strong>service</strong> et <strong>resolver</strong> associ√©s.</li>
                <li>Cr√©er les <strong>queries et mutations GraphQL</strong> suivantes :
                    <ul className="list-disc list-inside ml-6 mt-1 space-y-1">
                        <li><code>project(id: ID!)</code> ‚Äì retourne un projet avec ses t√¢ches.</li>
                        <li><code>createTask(dto: CreateTaskInput!)</code> ‚Äì cr√©e une nouvelle t√¢che.</li>
                        <li><code>updateTask(dto: UpdateTaskInput!)</code> ‚Äì met √† jour une t√¢che (titre, description,
                            statut, etc.).
                        </li>
                    </ul>
                </li>
                <li>G√©n√©rer et ex√©cuter la migration correspondante avec TypeORM.</li>
            </ul>

            <h3 className="text-xl font-semibold text-white mb-4">‚è∞ Job Cron (NestJS)</h3>
            <ul className="list-disc list-inside text-gray-300 space-y-2 mb-8">
                <li>Cr√©er un job avec <code>@nestjs/schedule</code> ex√©cut√© <strong>toutes les minutes</strong>.</li>
                <li>Ce job doit archiver les t√¢ches cr√©√©es depuis plus de 15 minutes.</li>
                <li>Tu peux utiliser un champ <code>isArchived: boolean</code> ou une date <code>archivedAt</code>.</li>
            </ul>

            <div className="bg-gray-950/50 border border-gray-800 rounded-lg p-4 mb-8">
                <p className="text-gray-400 mb-2">üìö Documentation utile :</p>
                <ul className="space-y-1 text-blue-400 text-sm">
                    <li>
                        <Link
                            href="https://docs.nestjs.com/techniques/task-scheduling"
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 hover:underline"
                        >
                            NestJS ‚Äì Task Scheduling <ExternalLink className="h-3 w-3"/>
                        </Link>
                    </li>
                    <li>
                        <Link
                            href="https://docs.nestjs.com/graphql/resolvers"
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 hover:underline"
                        >
                            NestJS ‚Äì GraphQL Resolvers <ExternalLink className="h-3 w-3"/>
                        </Link>
                    </li>
                </ul>
            </div>

            <Separator className="my-8 bg-gray-800"/>

            {/* FRONTEND */}
            <h3 className="text-xl font-semibold text-white mb-4">üñ•Ô∏è Frontend (Next.js + ShadCN)</h3>
            <p className="text-gray-300 mb-4">
                Tu vas maintenant afficher et manipuler les t√¢ches d‚Äôun projet c√¥t√© frontend.
                Tout doit s‚Äôint√©grer naturellement dans le style visuel du dashboard existant (th√®me sombre).
            </p>

            <ul className="list-disc list-inside text-gray-300 space-y-2 mb-8">
                <li>Afficher le <strong>nom du projet</strong> et la <strong>date de cr√©ation</strong>.</li>
                <li>Afficher la <strong>liste des t√¢ches</strong> r√©cup√©r√©es via l‚ÄôAPI GraphQL.</li>
                <li>Afficher pour chaque t√¢che : le titre, la description, la date de cr√©ation et son statut.</li>
                <li>Afficher les statuts avec des <strong>badges color√©s</strong> (ex : gris = √Ä faire, jaune = En
                    cours, vert = Termin√©).
                </li>
                <li>G√©rer un <strong>empty state</strong> s‚Äôil n‚Äôy a encore aucune t√¢che.</li>
            </ul>

            <Separator className="my-8 bg-gray-800"/>

            <h3 className="text-xl font-semibold text-white mb-4">üìã Modales et formulaires</h3>
            <p className="text-gray-300 mb-4">
                Cr√©e une modale <code>CreateTaskFormDialog</code> permettant d‚Äôajouter une nouvelle t√¢che.
                Elle doit utiliser <strong>React Hook Form</strong> + <strong>Zod</strong> pour la validation.
            </p>

            <ul className="list-disc list-inside text-gray-300 space-y-2 mb-8">
                <li>Le formulaire doit contenir les champs : <code>title</code>, <code>description</code>, et
                    √©ventuellement <code>status</code>.
                </li>
                <li>Utilise les composants ShadCN :
                    <ul className="list-disc list-inside ml-6 mt-1 space-y-1">
                        <li><code>Dialog</code> pour la modale,</li>
                        <li><code>Form</code>, <code>FormField</code>, <code>Input</code> pour les champs,</li>
                        <li><code>Button</code> pour la soumission et l‚Äôannulation.</li>
                    </ul>
                </li>
                <li>√Ä la soumission, appelle la mutation <code>createTask</code> et ferme la modale si la cr√©ation est
                    r√©ussie.
                </li>
            </ul>

            <p className="text-gray-300 mb-8">
                Cr√©e √©galement une modale ou un composant d‚Äô√©dition (ex : <code>UpdateTaskFormDialog</code>) pour
                modifier le titre ou la description d‚Äôune t√¢che existante.
            </p>

            <Separator className="my-8 bg-gray-800"/>

            <h3 className="text-xl font-semibold text-white mb-4">‚ö° Int√©gration GraphQL c√¥t√© front</h3>
            <p className="text-gray-300 mb-4">
                Toutes les d√©finitions GraphQL c√¥t√© frontend se trouvent dans :
            </p>

            <pre className="bg-gray-900 text-gray-200 p-4 rounded-lg text-sm mb-6 overflow-x-auto">
        /services/graphql/
      </pre>

            <p className="text-gray-300 mb-4">
                ‚ûú Cr√©e ici tes fichiers de <code>query</code> et <code>mutation</code> :
            </p>

            <ul className="list-disc list-inside text-gray-300 space-y-1 mb-6 ml-4">
                <li><code>project.graphql</code> ‚Äì pour r√©cup√©rer le projet et ses t√¢ches.</li>
                <li><code>createTask.graphql</code> ‚Äì pour cr√©er une t√¢che.</li>
                <li><code>updateTask.graphql</code> ‚Äì pour modifier une t√¢che.</li>
            </ul>

            <p className="text-gray-300 mb-4">
                Une fois les fichiers ajout√©s, ex√©cute la commande suivante pour r√©g√©n√©rer les hooks Apollo :
            </p>

            <pre className="bg-gray-900 text-green-400 p-4 rounded-lg text-sm mb-6 overflow-x-auto">
        yarn codegen
      </pre>

            <p className="text-gray-300 mb-8">
                Cela va g√©n√©rer automatiquement les hooks Apollo (ex : <code>useCreateTaskMutation</code>,
                <code>useUpdateTaskMutation</code>, <code>useProjectQuery</code>) √† utiliser dans tes composants.
            </p>

            <div className="bg-gray-950/50 border border-gray-800 rounded-lg p-4 mb-8">
                <p className="text-gray-400 mb-2">üìö Documentation GraphQL :</p>
                <ul className="space-y-1 text-blue-400 text-sm">
                    <li>
                        <Link
                            href="https://www.apollographql.com/docs/react/data/mutations/"
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 hover:underline"
                        >
                            Apollo React ‚Äì Mutations
                            <ExternalLink className="h-3 w-3"/>
                        </Link>
                    </li>
                    <li>
                        <Link
                            href="https://the-guild.dev/graphql/codegen/docs/getting-started"
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 hover:underline"
                        >
                            GraphQL Code Generator
                            <ExternalLink className="h-3 w-3"/>
                        </Link>
                    </li>
                </ul>
            </div>

            <Alert className="bg-white/10 border-gray-700">
                <Lightbulb className="h-5 w-5 text-white"/>
                <AlertTitle className="text-white">Astuce</AlertTitle>
                <AlertDescription className="text-white">
                    Si tu modifies le backend, pense toujours √† relancer <code>yarn codegen</code> pour mettre √† jour
                    ton schema.
                    N‚Äôh√©site pas √† t‚Äôinspirer des composants existants (CreateUserFormDialog, ProjectItem, etc.) pour
                    garder la m√™me logique.
                </AlertDescription>
            </Alert>

            <Separator className="my-8 bg-gray-800"/>

            <h3 className="text-xl font-semibold text-white mb-4">üì¶ Bonus</h3>
            <ul className="list-disc list-inside text-gray-300 space-y-2">
                <li>Ajoute un filtre pour afficher uniquement les t√¢ches selon leur statut.</li>
                <li>Ajoute une barre de progression du projet (ex : 3/5 t√¢ches termin√©es).</li>
                <li>Ajoute une suppression de t√¢che avec confirmation.</li>
                <li>Rends la page responsive et fluide.</li>
            </ul>
        </div>
    )
}
